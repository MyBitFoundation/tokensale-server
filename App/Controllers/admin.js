let async = require('async');

let Models = getModels(),
	Controllers = getControllers();

class AdminController {
	
	printPayers(cb) {
		return cb(null, {});
		Models.users.find({
			balance: {$gt: 0}
		}, (err, users) => {
			let result = [];
			async.each(users, (user, cb) => {
				Models.transactions.find({
					userId: user._id.toString()
				}, (err, txs) => {
					let sum = 0;
					txs.forEach(tx => {
						sum += tx.ethAmount;
					});
					result.push([user.email, user.balance, sum]);
					cb();
				});
			}, () => {
				cb(null, result);
			});
		});
	}
	
	referrers(cb, data) {
		Models.users.aggregate([{
			$graphLookup: {
				from: 'users',
				startWith: '$_id',
				connectFromField: '_id',
				connectToField: 'referralParams.referrer',
				maxDepth: 10000,
				depthField: "level",
				as: 'referrals'
			},
		}, {
			$project: {
				_id: 0,
				email: 1,
				address: 1,
				generatedAddress: 1,
				referrals: 1,
				numberOfReferrals: {$size: "$referrals"}
			}
		}, {
			$match: {
				numberOfReferrals: {
					$gte: 1
				}
			}
		}]).exec((err, result) => {
			let json2xls = require('json2xls');
			let json = [];
			
			result.forEach(Referrer => {
				json.push({
					"Email": Referrer.email,
					"Referral email": "",
					"Specified by user address": Referrer.address,
					"Generated by the system address": Referrer.generatedAddress,
					"Count referrals": Referrer.numberOfReferrals
				});
				Referrer.referrals.forEach(Referral => {
					json.push({
						"Email": "",
						"Referral  email": Referral.email,
						"Specified by user address": Referral.address,
						"Generated by the system address": Referral.generatedAddress,
						"Count referrals": Referral.numberOfReferrals
					});
				});
			});
			
			let xls = json2xls(json);
			
			data.res.type('xlsx');
			data.res.end(xls, 'binary');
		});
	}
}

Controllers.admin = new AdminController();